% TEIWAZ SUBJECT COMMUNICATOR API %
%  COPYRIGHT (C) 2021 Gansgruppe  %
% LICENSED UNDER BSD 3 SINCE 2021 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  OPENSOURCED ON 29.03.2021 BY   %
% 		  ALAN_GOOSE_SW AND     	  %
%        GB_GESSE_0xffea          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

; CREATED: 11.12.2020
; UPDATED: 28.03.2021 (23:23 CEST)
; AUTHORS: ALAN_GOOSE_SW, GB_GESSE_0xffea, [LIQUIDATED]
; Ported to 2.1-2.2 by [LIQUIDATED] and ALAN_GOOSE_SW

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Functionality of the API:															;
; This API serves for the connection of subjects to the ;
; TEIWAZ system and content monitoring.									;
; This replaces the subject_monitor.aia program					;
; Subject data is stored as a struct containing:				;
; 	1. ID																								;
;   2. Program  																				;
; 	3. Timestamp of connection													;
;		4. Additional binary data														;
; Actual handling of i/o is accomplished on the native  ;
; level.																								;
; Subjects are connected to a 6522, of which one can 		;
; handle up to 16 subjects.															;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LNG_VER 2$2
REQ_API $f
API_REG $fc

; Fields
API_EXP_BEGIN FLDS

	$0 NSUBJECTS ; Number of connected subjects
	$1 CIUPTIME	 ; Uptime of central interface
	$2 ERROR_BOL ; Tells if an error occured
	$3 ERROR_COD ; Code of latest error
	$4 ERROR_NAM ; Name of latest error
	
API_EXP_END

; Structs
API_EXP_BEGIN STRUCT

	; Subject structure
	; @SEE gansgruppe.d.subjects.Subject
	; @AUTHOR [LIQUIDATED]
	$0 SUBJECT::
		INT  ID					; Identifier of the subject
		INT  PROGRAM		; Program the subject is exposed to
		LONG TIMESTAMP	; Timestamp of connection
		MEM  DATA				; Additional binary data	
		INT  PORT				; Port the Subject is connected to
	END
	
API_EXP_END

; Functions
API_EXP_BEGIN FUNC
	$0 CONNECT:: SUBJECT AS SUB, INT AS PORT
		SUB:PORT PORT
		
		SET_PUSH
		
		SET PORT   $#1 																   ; Open port to the subject
		CPY PORT+1 §DATA_FEED														 ; Copy the address of the data feed (initial value of adress is the id of the feed)
		INTERFACE "registerDataFeed" GIVES DATA_FEED     ; Register this data feeed
		
		SET_POP
	END
	
	$1 DISCONNECT:: SUBJECT AS SUB
		CPY SUB:PORT+1 §DATA_FEED
		SET SUB:PORT $#0
		INTERFACE "unregisterDataFeed" GIVES DATA_FEED
	END
	
	; "Liquidates" a subject
	; @AUTHOR [LIQUIDATED]
	$2 LIQUIDATE:: SUBJECT AS SUB, STRING AS REASON, INT AS USR
		§HAS_PERMS INTERFACE "checkPermissions" GIVES USR
		CMP HAS_PERMS $#1
		JE _RET
		
		INTERFACE "liquidateSubject" GIVES SUB, REASON		; what do they mean "liquidate"?
		LOG_LIQ_SUCC USR REASON
		
		:RET
		LOG_LIQ_FAIL USR REASON
	END
	
	$3 SHUTDOWN::
		LOG_SHUTDOWN
		INTERFACE "disconnectAll"
		INTERFACE "saveData"
		INTERFACE "notifyTerminals"
		INTERFACE "cleanup"
		CLEAR_MEMORY
		EXIT_API
	END
API_EXP_END

% Copyright (c) 2020-2021 Gansgruppe/Sinnesloeschen %
% API Key %
API_KEY_BITS
;;START
53 55 42 4a 45 43 54 5f 43 4f 4d 4d 55 4e 49 43 41 54 4f 52 5f 41 50 49 3b 20 56 45 52 53 49 4f 4e 20 32 3b 20 41 55 54 48 4f 52 53 3a 20 41 4c 41 4e 47 4f 4f 53 45 2c 20 47 42 5f 47 45 45 53 45 5f 30 78 66 66 65 61 2c 20 47 42 5f 47 45 45 53 45 5f 30 78 66 66 65 39 3b 20 53 49 47 4e 41 54 55 52 45 3a 20 61 38 37 36 74 66 39 3b 20 49 44 3a 20 46 43 3b 20 36 34 2f 33 32 42 49 54 3b 20 4d 45 53 53 41 47 45 20 54 68 65 72 65 20 69 73 20 61 6e 6f 74 68 65 72 20 63 68 61 6e 6e 65 6c 2c 20 66 69 6e 64 20 69 74 20 75 6e 64 65 72 20 74 68 65 20 74 69 74 6c 65 20 6f 66 20 74 65 69 77 61 7a 2e 20 54 68 65 72 65 20 61 72 65 20 72 65 73 6f 75 72 63 65 73;;END
